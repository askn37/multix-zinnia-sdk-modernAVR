HELPTEXT = "\n"
#----------------------------------------------------------------------
#
# program name should not be changed...
PROGRAM    = optiboot_dx
MF:= $(MAKEFILE_LIST)

### defaults
MCU_TARGET = avr128db64
TIMEOUT = 1
LED_DATA_FLASH = 1
# BAUD_RATE = 115200

### RS485 (HARDWARE) XDIR pin support
# RS485_ENABLE = 1
# RS485_INVERT = 1

ifdef BIGBOOT
LDSECTIONS  = -Wl,-section-start=.text=0 \
	      -Wl,--section-start=.application=0x400 \
	      -Wl,--section-start=.version=0x3fe
else
LDSECTIONS  = -Wl,-section-start=.text=0 \
	      -Wl,--section-start=.application=0x200 \
	      -Wl,--section-start=.version=0x1fe
endif

# User local development install path to;
#
# ~/Documents/Arduino/hardware/Multix-Zinnia/modernAVR/bootloaders/optiboot_dx2
# ~/Documents/Arduino/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/bin/
#                    ^__BASE_DIRECTORY__
#
AVRGCCROOT = ../../../../../tools/avr-gcc/7.3.0-avr8-gnu-toolchain/bin/
AVRDUDE_CONF =

# export symbols to recursive makes (for ISP)
export

#
# End of build environment code.


CC = $(AVRGCCROOT)avr-gcc
RCC = $(abspath $(CC))
#$(info wildcard ("$(wildcard $(CC))",""))
ifndef PRODUCTION
$(info Using Compiler at: ${RCC})
endif


# If we have a PACKS directory specified, we should use it...
ifdef PACKS
PACK_OPT= -I "$(PACKS)/include/" -B "$(PACKS)/gcc/dev/$*"
ifndef PRODUCTION
$(info and Chip-defining PACKS at ${PACKS})
endif
endif


OPTIMIZE = -Os -fno-split-wide-types -mrelax

# Override is only needed by avr-lib build system.

override CFLAGS  = -g -Wall $(OPTIMIZE) -save-temps=obj

override LDFLAGS = $(LDSECTIONS) -Wl,--relax -nostartfiles -nostdlib

OBJCOPY = $(AVRGCCROOT)avr-objcopy
OBJDUMP = $(AVRGCCROOT)avr-objdump
SIZE    = $(AVRGCCROOT)avr-size

include parse_options.mk

.PRECIOUS: optiboot_%.elf

ifndef PRODUCTION
LISTING= $(OBJDUMP) -S
else
LISTING= @true
endif

ifeq ($(SKIP_BOOTLOADER_ON_POR), 0)
START_APP_ON_POR=0
else
START_APP_ON_POR=1
endif

#---------------------------------------------------------------------------
# "Chip-level Platform" targets.
# A "Chip-level Platform" compiles for a particular chip, but probably does
# not have "standard" values for things like clock speed, LED pin, etc.
# Makes for chip-level platforms should usually explicitly define their
# options like: "make atmega4809 UARTTX=A4 LED=D0"
#---------------------------------------------------------------------------
#
# Mega0, tiny0, tiny1 don't really have any chip-specific requirements.
#
# Note about fuses:
#  The fuses are defined in the source code.  There are 9!
#  Be sure to use a programmer that will program the fuses from the object file.
#
#---------------------------------------------------------------------------
#

HELPTEXT += "\n-------------\n\n"


optiboot_%.hex: optiboot_%.elf
	$(OBJCOPY) -j .text -j .data -j .version \
	  --set-section-flags .version=alloc,load -O ihex $< $@
	@echo Bare Bootloader size
	$(SIZE) $@


#
# Note that the .application section is not normally copied to the
#  .hex file.  The .application section is useful for detecting growth
#  beyond 512 bytes, and for being a target for starting the
#  application, and for referencing certain otherwise-unused variables
#  so they aren't optimized away, but all of that happens during
#  compilation or link, and the code doesn't need to to actually be
#  present in the binary/hex files (where it might interfere with easy
#  merging with a real application.)
# (including it in the .application may be useful for debugging, though)

optiboot_%.elf:	optiboot_dx2.c FORCE
	$(CC) $(CFLAGS) $(CPU_OPTIONS) $(LED_OPTIONS) $(UART_OPTIONS) $(COMMON_OPTIONS) $(LDFLAGS) $(PACK_OPT) -mmcu=$* -o $@ $<
	@echo Bootloader size with skeleton App
	@$(SIZE) $@
	$(LISTING) $@ > optiboot_$*.lst


#---------------------------------------------------------------------------
# "Board-level Platform" targets.
# A "Board-level Platform" implies a manufactured platform with a particular
# AVR_FREQ, LED, and so on.  Parameters are not particularly changable from
# the "make" command line.
# Most of the board-level platform builds should envoke make recursively
#  appropriate specific options
#---------------------------------------------------------------------------

avr%:
	$(MAKE) -f $(MF) optiboot_avr$*.hex
	mv optiboot_avr$*.hex ../hex/${BOOTNAME}_${UARTTX}_${BAUD_RATE}_L${LED}.hex

#---------------------------------------------------------------------------
#
# Generic build instructions
#

FORCE:

isp: $(TARGET) FORCE
	"$(MAKE)" -f Makefile.isp isp TARGET=$(TARGET)

isp-stk500: $(PROGRAM)_$(TARGET).hex
	$(STK500-1)
	$(STK500-2)

#windows "rm" is dumb and objects to wildcards that don't exist
clean:
	@touch __temp_.o __temp_.elf __temp_.lst __temp_.map
	@touch __temp_.i __temp_.s
	@touch __temp_.sym __temp_.lss __temp_.eep __temp_.srec
	@touch __temp_.bin __temp_.hex __temp_.tmp.sh
	rm -rf *.o *.elf *.lst *.map *.i *.s *.sym *.lss *.eep *.srec *.bin *.hex *.tmp.sh

version:
	$(CC) --version | head -1
	@grep "define OPTIBOOT_...VER" $(PROGRAM).c

clean_asm:
	rm -rf *.lst

%.lst: %.elf FORCE
	$(OBJDUMP) -h -S $< > $@

%.srec: %.elf FORCE
	$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O srec $< $@

%.bin: %.elf FORCE
	$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O binary $< $@

help:
	@echo -e $(HELPTEXT)
