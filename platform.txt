name=Multix Zinnia Product SDK [modernAVR]
version=0.0.1

archive_file_path={build.path}/{archive_file}
bootloader.tool=avrdude
bootloader.LOCKKEY=0x5C,0xC5,0xC5,0x5C
build.extra_flags={build.buildopt} {build.console_baud} {build.console_select} {build.led_pin} {build.macroapi} {build.printf} -DUPLD_MAX_SIZE={upload.maximum_size} '-DSKETCH_PATH={build.source.path}'
build.flags=-DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags}
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'
build.usb_manufacturer="Unknown"
build.core=modernAVR
upload.speed=115200

compiler.S.extra_flags=
compiler.S.flags=-c -g -x assembler-with-cpp -MMD -flto {build.flags}
compiler.ar.cmd=avr-gcc-ar
compiler.ar.extra_flags=
compiler.ar.flags=rcs
compiler.c.cmd=avr-gcc
compiler.c.elf.cmd=avr-gcc
compiler.c.elf.extra_flags=
compiler.c.elf.flags=-g -Os {compiler.warning_flags} -fuse-linker-plugin -Wl,--gc-sections -Wl,--section-start={build.text_section_start} -flto -mrelax -lm
compiler.c.extra_flags=
compiler.c.flags=-c -g -Os {compiler.warning_flags} -std=gnu11 -fno-fat-lto-objects -save-temps=obj -ffunction-sections -fdata-sections -MMD -flto -mrelax {build.flags}
compiler.cpp.cmd=avr-g++
compiler.cpp.extra_flags=
compiler.cpp.flags=-c -g -Os {compiler.warning_flags} -std=gnu++17 -fpermissive -fno-exceptions -fno-threadsafe-statics -Wno-error=narrowing -ffunction-sections -fdata-sections -MMD -flto -mrelax {build.flags}
compiler.elf2hex.bin.flags=-O binary -R .eeprom
compiler.elf2hex.cmd=avr-objcopy
compiler.elf2hex.extra_flags= -R .nvmem
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.ldflags=
compiler.objcopy.cmd=avr-objcopy
compiler.objcopy.eep.extra_flags=
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.objdump.cmd=avr-objdump
compiler.objdump.flags=--disassemble --source --line-numbers --demangle --section=.text --section=.data --section=.eeprom --section=.nvmem
compiler.path={runtime.platform.path}/../../../tools/avr-gcc/7.3.0-avr8-gnu-toolchain/bin/
compiler.size.cmd=avr-size
compiler.warning_flags.all=-Wall -Wextra
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.none=-w
compiler.warning_flags=-w

preproc.includes.flags=-w -x c++ -M -MG -MP
preproc.macros.flags=-w -x c++ -E -CC


recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -mmcu={build.mcu} {compiler.S.extra_flags} {includes} "{source_file}" -o "{object_file}"
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.ldflags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} {build.printflt} -o "{build.path}/{build.project_name}.elf" {object_files} "{build.path}/{archive_file}" "-L{build.path}"
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mmcu={build.mcu} {compiler.c.extra_flags} {includes} "{source_file}" -o "{object_file}"
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mmcu={build.mcu} {compiler.cpp.extra_flags} {includes} "{source_file}" -o "{object_file}"
recipe.hooks.objcopy.postobjcopy.1.pattern.linux=chmod +x "{runtime.platform.path}/scripts/create_disassembler_listing.sh"
recipe.hooks.objcopy.postobjcopy.1.pattern.macosx=chmod +x "{runtime.platform.path}/scripts/create_disassembler_listing.sh"
recipe.hooks.objcopy.postobjcopy.1.pattern.windows=cmd /C "{compiler.path}{compiler.objdump.cmd}" {compiler.objdump.flags} "{build.path}/{build.project_name}.elf" > "{build.path}/{build.project_name}.{build.mcu}_{build.f_cpu}.lst"
recipe.hooks.objcopy.postobjcopy.2.pattern.linux="{runtime.platform.path}/scripts/create_disassembler_listing.sh" "{compiler.path}{compiler.objdump.cmd}" "{compiler.objdump.flags}" "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.{build.mcu}_{build.f_cpu}.lst"
recipe.hooks.objcopy.postobjcopy.2.pattern.macosx="{runtime.platform.path}/scripts/create_disassembler_listing.sh" "{compiler.path}{compiler.objdump.cmd}" "{compiler.objdump.flags}" "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.{build.mcu}_{build.f_cpu}.lst"
recipe.hooks.savehex.presavehex.1.pattern.linux=chmod +x "{runtime.platform.path}/scripts/delete_merged_output.sh"
recipe.hooks.savehex.presavehex.1.pattern.macosx=chmod +x "{runtime.platform.path}/scripts/delete_merged_output.sh"
recipe.hooks.savehex.presavehex.1.pattern.windows="{runtime.platform.path}/scripts/delete_merged_output.bat" {build.export_merged_output} "{build.path}\{build.project_name}.with_bootloader.hex"
recipe.hooks.savehex.presavehex.2.pattern.linux="{runtime.platform.path}/scripts/delete_merged_output.sh" {build.export_merged_output} "{build.path}/{build.project_name}.with_bootloader.hex"
recipe.hooks.savehex.presavehex.2.pattern.macosx="{runtime.platform.path}/scripts/delete_merged_output.sh" {build.export_merged_output} "{build.path}/{build.project_name}.with_bootloader.hex"
recipe.hooks.savehex.presavehex.2.pattern.windows=cmd /C copy "{build.path}\{build.project_name}.{build.mcu}_{build.f_cpu}.lst" "{sketch_path}"
recipe.hooks.savehex.presavehex.3.pattern.linux=cp "{build.path}/{build.project_name}.{build.mcu}_{build.f_cpu}.lst" "{sketch_path}"
recipe.hooks.savehex.presavehex.3.pattern.macosx=cp "{build.path}/{build.project_name}.{build.mcu}_{build.f_cpu}.lst" "{sketch_path}"
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.eep"
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"
recipe.output.save_file={build.project_name}.{build.mcu}_{build.f_cpu}.hex
recipe.output.tmp_file={build.project_name}.hex
recipe.preproc.includes="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} {compiler.cpp.extra_flags} {includes} "{source_file}"
recipe.preproc.macros="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} {compiler.cpp.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*
recipe.size.regex=^(?:\.text|\.data|\.rodata|\.bootloader)\s+([0-9]+).*


tools.avrdude.bootloader.eeprom=-U "eeprom:w:{build.path}/{build.project_name}.eep:i"
tools.avrdude.bootloader.fuse0=-U fuse0:w:{bootloader.WDTCFG}:m
tools.avrdude.bootloader.fuse1=-U fuse1:w:{bootloader.BODCFG}:m
tools.avrdude.bootloader.fuse2=-U fuse2:w:{bootloader.OSCCFG}:m
tools.avrdude.bootloader.fuse5=-U fuse5:w:{bootloader.SYSCFG0}:m
tools.avrdude.bootloader.fuse6=-U fuse6:w:{bootloader.SYSCFG1}:m
tools.avrdude.bootloader.fuse7=-U fuse7:w:{bootloader.CODESIZE}:m
tools.avrdude.bootloader.fuse8=-U fuse8:w:{bootloader.BOOTSIZE}:m
tools.avrdude.bootloader.locks=-U lock:w:{bootloader.LOCKKEY}:m
tools.avrdude.bootloader.params.quiet=-q -q
tools.avrdude.bootloader.params.verbose=-v
tools.avrdude.bootloader.pattern="{cmd.path}" -C "{config.path}" -v -p {build.mcu} -c {protocol} {program.extra_params} {bootloader.fuse0} {bootloader.fuse1} {bootloader.fuse2} {bootloader.fuse5} {bootloader.fuse6} {bootloader.fuse7} {bootloader.fuse8} -e -U "flash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i"
tools.avrdude.cmd.path={path}/bin/avrdude
tools.avrdude.config.path={runtime.platform.path}/avrdude.conf.updi
tools.avrdude.erase.params.quiet=-q -q
tools.avrdude.erase.params.verbose=-v
tools.avrdude.erase.pattern=
tools.avrdude.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.avrdude.path={runtime.platform.path}/../../../tools/avrdude/7.0.0-arduino2
tools.avrdude.program.params.noverify=-V
tools.avrdude.program.params.quiet=-q -q
tools.avrdude.program.params.verbose=-v
tools.avrdude.program.pattern="{cmd.path}" -C "{config.path}" {program.verbose} {program.verify} -p {build.mcu} -c {protocol} {program.extra_params} {bootloader.fuse0} {bootloader.fuse1} {bootloader.fuse2} {bootloader.fuse5} {bootloader.fuse6} {bootloader.fuse7} {bootloader.fuse8} {bootloader.eepupload} -U "flash:w:{build.path}/{build.project_name}{bootloader.programed_type}.hex:i"
tools.avrdude.program.verify=
tools.avrdude.upload.network_pattern="{network_cmd}" -address {serial.port} -port {upload.network.port} -sketch "{build.path}/{build.project_name}.hex" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}
tools.avrdude.upload.params.noverify=-V
tools.avrdude.upload.params.quiet=-q -q
tools.avrdude.upload.params.verbose=-v
tools.avrdude.upload.pattern="{cmd.path}" -C "{config.path}" {upload.verbose} {upload.verify} -p {build.mcu} -c {upload.protocol} -P {serial.port} -b {upload.speed} {bootloader.eepupload} -D -U "flash:w:{build.path}/{build.project_name}.hex:i"
tools.avrdude.upload.verify=
tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}
